{"version":3,"sources":["dmAppointmentPlus.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","ans_grammar","confirmation","negation","help","dec_grammar","meeting","celebrity","dmMachine","initial","entry","assign","counter","context","states","idle","on","CLICK","init","TTS_READY","getHelp","explain","ENDSPEECH","appointmentApp","hist","askForName","RECOGNISED","target","cond","recResult","utterance","confidence","actions","username","uncertain","TIMEOUT","choose","always","prompt1","prompt2","prompt3","ask","makeSureName","uncertainAnswer","makeSure","nomatch","makeSureConfirmation","makeSureNegation","greet","welcome","makeSureMeeting","makeSureCelebrity","makeSureCeleb","confirmCeleb","getCeleb","invoke","id","src","event","fetch","Request","then","data","json","onDone","info","AbstractText","console","log","onError","celebMeeting","prompt","purpose","makeSurePurpose","date","makeSureDay","makeSureTime","info2","info3","allDay","confirmAllDay","confirmTime","success","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","test","name","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","content","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.0317dde2.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\n\r\nconst kbRequest = (text: string) =>\r\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\r\n\r\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string } } = {\r\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\r\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\r\n    \"Cinema.\": { title: \"A movie at the cinema\" },\r\n    \"Walk.\": { title: \"A walk in the park\" },\r\n    \"Date.\": { title: \"A romantic date at a great restaurant\" },\r\n    \"Language course.\": { title: \"Swedish language course on zoom\" },\r\n    \"Programming.\": { title: \"Programming the assignment with classmates\" },\r\n    \"Video games.\": { title: \"Gaming with friends\" },\r\n    \"Phone call.\": { title: \"A call with the family\" },\r\n    \"It's a lecture.\": { title: \"Dialogue systems lecture\" },\r\n    \"It's a lunch.\": { title: \"Lunch at the canteen\" },\r\n    \"It's cinema.\": { title: \"A movie at the cinema\" },\r\n    \"It's a walk.\": { title: \"A walk in the park\" },\r\n    \"It's a date.\": { title: \"A romantic date at a great restaurant\" },\r\n    \"It's a language course.\": { title: \"Swedish language course on zoom\" },\r\n    \"It's programming.\": { title: \"Programming the assignment with classmates\" },\r\n    \"It's video games.\": { title: \"Gaming with friends\" },\r\n    \"It's a phone call.\": { title: \"A call with the family\" },\r\n\r\n    \"On Monday.\": { day: \"Monday\" },\r\n    \"On Tuesday.\": { day: \"Tuesday\" },\r\n    \"On Wednesday.\": { day: \"Wednesday\" },\r\n    \"On Thursday.\": { day: \"Thursday\" },\r\n    \"On Friday.\": { day: \"Friday\" },\r\n    \"On Saturday.\": { day: \"Saturday\" },\r\n    \"On Sunday.\": { day: \"Sunday\" },\r\n    \"Monday.\": { day: \"Monday\" },\r\n    \"Tuesday.\": { day: \"Tuesday\" },\r\n    \"Wednesday.\": { day: \"Wednesday\" },\r\n    \"Thursday.\": { day: \"Thursday\" },\r\n    \"Friday.\": { day: \"Friday\" },\r\n    \"Saturday.\": { day: \"Saturday\" },\r\n    \"Sunday.\": { day: \"Sunday\" },\r\n    \"Monday\": { day: \"Monday\" },\r\n    \"Tuesday\": { day: \"Tuesday\" },\r\n    \"Wednesday\": { day: \"Wednesday\" },\r\n    \"Thursday\": { day: \"Thursday\" },\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"Saturday\": { day: \"Saturday\" },\r\n    \"Sunday\": { day: \"Sunday\" },\r\n    \"Today\": { day: \"today\" },\r\n    \"Tomorrow.\": { day: \"tomorrow\" },\r\n\r\n    \"Midday.\": { time: \"12:00\" }, // this section is rather long due to having 12 possible hours and many ways of saying them (or them being written down)\r\n    \"At noon\": { time: \"12:00\" },\r\n    \"10.\": { time: \"10:00\" },\r\n    \"11.\": { time: \"11:00\" },\r\n    \"12.\": { time: \"12:00\" },\r\n    \"1.\": { time: \"1:00\" },\r\n    \"2.\": { time: \"2:00\" },\r\n    \"3.\": { time: \"3:00\" },\r\n    \"4.\": { time: \"4:00\" },\r\n    \"5.\": { time: \"5:00\" },\r\n    \"6.\": { time: \"6:00\" },\r\n    \"7.\": { time: \"7:00\" },\r\n    \"8.\": { time: \"8:00\" },\r\n    \"9.\": { time: \"9:00\" },\r\n    \"10\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"1\": { time: \"1:00\" },\r\n    \"2\": { time: \"2:00\" },\r\n    \"3\": { time: \"3:00\" },\r\n    \"4\": { time: \"4:00\" },\r\n    \"5\": { time: \"5:00\" },\r\n    \"6\": { time: \"6:00\" },\r\n    \"7\": { time: \"7:00\" },\r\n    \"8\": { time: \"8:00\" },\r\n    \"9\": { time: \"9:00\" },\r\n    \"At 10:00\": { time: \"10:00\" },\r\n    \"At 11:00\": { time: \"11:00\" },\r\n    \"At 12:00\": { time: \"12:00\" },\r\n    \"At 1:00\": { time: \"1:00\" },\r\n    \"At 2:00\": { time: \"2:00\" },\r\n    \"At 3:00\": { time: \"3:00\" },\r\n    \"At 4:00\": { time: \"4:00\" },\r\n    \"At 5:00\": { time: \"5:00\" },\r\n    \"At 6:00\": { time: \"6:00\" },\r\n    \"At 7:00\": { time: \"7:00\" },\r\n    \"At 8:00\": { time: \"8:00\" },\r\n    \"At 9:00\": { time: \"9:00\" },\r\n    \"At ten\": { time: \"10:00\" },\r\n    \"At eleven\": { time: \"11:00\" },\r\n    \"At twelve\": { time: \"12:00\" },\r\n    \"At one\": { time: \"1:00\" },\r\n    \"At two\": { time: \"2:00\" },\r\n    \"At three\": { time: \"3:00\" },\r\n    \"At four\": { time: \"4:00\" },\r\n    \"At five\": { time: \"5:00\" },\r\n    \"At six\": { time: \"6:00\" },\r\n    \"At seven\": { time: \"7:00\" },\r\n    \"At eight\": { time: \"8:00\" },\r\n    \"At nine\": { time: \"9:00\" },\r\n    \"At 10:00 o'clock.\": { time: \"10:00\" },\r\n    \"At 11:00 o'clock.\": { time: \"11:00\" },\r\n    \"At 12:00 o'clock.\": { time: \"12:00\" },\r\n    \"At 1:00 o'clock.\": { time: \"1:00\" },\r\n    \"At 2:00 o'clock.\": { time: \"2:00\" },\r\n    \"At 3:00 o'clock.\": { time: \"3:00\" },\r\n    \"At 4:00 o'clock.\": { time: \"4:00\" },\r\n    \"At 5:00 o'clock.\": { time: \"5:00\" },\r\n    \"At 6:00 o'clock.\": { time: \"6:00\" },\r\n    \"At 7:00 o'clock.\": { time: \"7:00\" },\r\n    \"At 8:00 o'clock.\": { time: \"8:00\" },\r\n    \"At 9:00 o'clock.\": { time: \"9:00\" },\r\n    \"10:00 o'clock.\": { time: \"10:00\" },\r\n    \"11:00 o'clock.\": { time: \"11:00\" },\r\n    \"12:00 o'clock.\": { time: \"12:00\" },\r\n    \"1:00 o'clock.\": { time: \"1:00\" },\r\n    \"2:00 o'clock.\": { time: \"2:00\" },\r\n    \"3:00 o'clock.\": { time: \"3:00\" },\r\n    \"4:00 o'clock.\": { time: \"4:00\" },\r\n    \"5:00 o'clock.\": { time: \"5:00\" },\r\n    \"6:00 o'clock.\": { time: \"6:00\" },\r\n    \"7:00 o'clock.\": { time: \"7:00\" },\r\n    \"8:00 o'clock.\": { time: \"8:00\" },\r\n    \"9:00 o'clock.\": { time: \"9:00\" },\r\n    \"10:00 o'clock\": { time: \"10:00\" },\r\n    \"11:00 o'clock\": { time: \"11:00\" },\r\n    \"12:00 o'clock\": { time: \"12:00\" },\r\n    \"1:00 o'clock\": { time: \"1:00\" },\r\n    \"2:00 o'clock\": { time: \"2:00\" },\r\n    \"3:00 o'clock\": { time: \"3:00\" },\r\n    \"4:00 o'clock\": { time: \"4:00\" },\r\n    \"5:00 o'clock\": { time: \"5:00\" },\r\n    \"6:00 o'clock\": { time: \"6:00\" },\r\n    \"7:00 o'clock\": { time: \"7:00\" },\r\n    \"8:00 o'clock\": { time: \"8:00\" },\r\n    \"9:00 o'clock\": { time: \"9:00\" },\r\n}\r\n\r\nconst ans_grammar: { [index: string]: { confirmation?: string, negation?: string, help?: string } } = {\r\n\r\n    \"Yes.\": { confirmation: \"Yes\" },\r\n    \"Yeah.\": { confirmation: \"Yes\" },\r\n    \"Of course.\": { confirmation: \"Yes\" },\r\n    \"Exactly.\": { confirmation: \"Yes\" },\r\n    \"Yeah, exactly.\": { confirmation: \"Yes\" },\r\n    \"No.\": { negation: \"No\" },\r\n    \"Nope.\": { negation: \"No\" },\r\n    \"No way.\": { negation: \"No\" },\r\n    \"Not what I said.\": { negation: \"No\" },\r\n    \"Help.\": { help: \"Help\" },\r\n    \"Help me.\": { help: \"Help\" },\r\n    \"I don't know what to do.\": { help: \"Help\" },\r\n    \"I don't know what to say.\": { help: \"Help\" }\r\n}\r\n\r\nconst dec_grammar: { [index: string]: { meeting?: string, celebrity?: string } } = {\r\n\r\n    \"I want to create a meeting.\": { meeting: \"Yes\" },\r\n    \"Create a meeting.\": { meeting: \"Yes\" },\r\n    \"Create a new meeting.\": { meeting: \"Yes\" },\r\n    \"I want you to create a meeting.\": { meeting: \"Yes\" },\r\n    \"I want you to create a new meeting.\": { meeting: \"Yes\" },\r\n    \"Make a meeting.\": { meeting: \"Yes\" },\r\n    \"A meeting.\": { meeting: \"Yes\" },\r\n    \"I want a meeting.\": { meeting: \"Yes\" },\r\n    \"Meeting.\": { meeting: \"Yes\" },\r\n    \"Meeting\": { meeting: \"Yes\" },\r\n    \"I want to ask about somebody.\": { celebrity: \"Yes\" },\r\n    \"I want to ask about someone.\": { celebrity: \"Yes\" },\r\n    \"Ask about somebody.\": { celebrity: \"Yes\" },\r\n    \"Ask about someone.\": { celebrity: \"Yes\" },\r\n    \"I want to ask.\": { celebrity: \"Yes\" },\r\n    \"I want to ask about a celebrity.\": { celebrity: \"Yes\" },\r\n    \"Ask about a celebrity.\": { celebrity: \"Yes\" },\r\n    \"A celebrity.\": { celebrity: \"Yes\" },\r\n    \"Celebrity.\": { celebrity: \"Yes\" },\r\n    \"I want to ask about a famous person.\": { celebrity: \"Yes\" },\r\n    \"Ask about a famous person.\": { celebrity: \"Yes\" },\r\n    \"A famous person.\": { celebrity: \"Yes\" },\r\n    \"Somebody.\": { celebrity: \"Yes\" },\r\n    \"Somebody\": { celebrity: \"Yes\" },\r\n    \"Someone.\": { celebrity: \"Yes\" },\r\n    \"Someone\": { celebrity: \"Yes\" },\r\n    \"Ask.\": { celebrity: \"Yes\" },\r\n    \"Ask\": { celebrity: \"Yes\" },\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'idle',\r\n    entry: assign({ counter: (context) => 0 }),\r\n    states: {\r\n        idle: {\r\n            on: {\r\n                CLICK: 'init'\r\n            }\r\n        },\r\n\r\n        init: {\r\n            on: {\r\n                TTS_READY: 'appointmentApp',\r\n                CLICK: 'appointmentApp',\r\n            }\r\n        },\r\n\r\n        getHelp: {\r\n            initial: 'explain',\r\n            states: {\r\n                explain: {\r\n                    entry: say(`Please make sure to speak slowly and clearly so that the system understands you.`),\r\n                    on: { ENDSPEECH: '#root.dm.appointmentApp.hist' },\r\n                }\r\n            }\r\n        },\r\n\r\n        appointmentApp: {\r\n            initial: 'askForName',\r\n            states: {\r\n                hist: {\r\n                    type: 'history',\r\n                },\r\n\r\n                askForName: {\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: 'greet',\r\n                                cond: (context) => context.recResult[0].confidence > 0.6,\r\n                                actions: [assign({ username: (context) => context.recResult[0].utterance }), assign({ counter: (context) => 0 })]\r\n                            },\r\n                            {\r\n                                target: '.makeSureName',\r\n                                cond: (context) => context.recResult[0].confidence <= 0.6,\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            }\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter+1 }), target: '.choose' }\r\n                    },\r\n                    states: {\r\n                        choose: {\r\n                                always: [\r\n                                    { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                    { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                    { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                    { target: '#root.dm.init', cond: (context) => context.counter === 3 },\r\n                                ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: say(\"What's your name?\"),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"What should I call you?\"),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Please tell me your name.\"),\r\n                            on: {\r\n                                ENDSPEECH: 'ask'\r\n                            }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        makeSureName: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.greet',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ username: (context) => context.uncertain }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.askForName',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.uncertain}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        },\r\n                        makeSureConfirmation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.greet',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ username: (context) => context.uncertain }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.askForName',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',  // I am aware that I essentially never ask for .nomatch statements that are below the threshold, but if they are not what the user meant, then this way they can \r\n                                                             // say what they wanted to say faster, and if it is what the user meant, the system would not have understood it either way and asked them to reformulate or give\r\n                                                             // another answer. Thus, it is just skipping a step where a yes/no answer would not at all have made a difference regardless of whether or not the answer 'pinacolada' \r\n                                                             // was intended for a question about the day of the meeting, it is not an acceptable answer and would lead back to the beginning of that state. I hope this is an \r\n                                                             // acceptable explanation and solution to this issue. I can also imagine that it is possible to do this in a more abstracted away fashion, but I have not found a \r\n                                                             // satisfactory solution to this so I had to rely on copy-pasting a lot of the code and changing the target states. \r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n                            },\r\n                        },\r\n                        makeSureNegation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.askForName',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.greet',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ username: (context) => context.uncertain }),]\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n\r\n                greet: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `Welcome, ${context.username}.`\r\n                    })),\r\n                    on: { ENDSPEECH: 'welcome' }\r\n                },\r\n\r\n                welcome: {\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '.makeSureMeeting',\r\n                                cond: (context) => \"meeting\" in (dec_grammar[context.recResult[0].utterance] || {}),\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            },\r\n                            {\r\n                                target: '.makeSureCelebrity',\r\n                                cond: (context) => \"celebrity\" in (dec_grammar[context.recResult[0].utterance] || {}),\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            },\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '.nomatch',\r\n                                actions: assign({ counter: (context) => context.counter + 1 })\r\n                            }\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n                    states: {\r\n                        choose: {\r\n                            always: [\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: '#root.dm.init', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: say(\"Do you want to create a meeting or ask about somebody?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"Would you prefer to create a new meeting or ask about a celebrity?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Please tell me if you want to make a meeting or ask about a famous person.\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand that.\"),\r\n                            on: { ENDSPEECH: 'choose' }\r\n                        },\r\n                        makeSureMeeting: {\r\n                            initial: 'choose',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.purpose',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.welcome',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: '.makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                    },\r\n                                    {\r\n                                        target: '.makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                choose: {\r\n                                    always: [\r\n                                        { target: '#root.dm.appointmentApp.purpose', cond: (context) => context.recResult[0].confidence > 0.6, },\r\n                                        { target: 'makeSure', cond: (context) => context.recResult[0].confidence <= 0.6, },\r\n                                    ]\r\n                                },\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.uncertain}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n                                makeSureConfirmation: {\r\n                                    initial: 'makeSure',\r\n                                    on: {\r\n                                        RECOGNISED: [\r\n                                            {\r\n                                                target: '#root.dm.appointmentApp.purpose',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                                actions: [assign({ counter: (context) => 0 })]\r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.appointmentApp.welcome',\r\n                                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                            },\r\n                                            {\r\n                                                target: 'makeSureConfirmation',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                                actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                            },\r\n                                            {\r\n                                                target: 'makeSureNegation',\r\n                                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                                actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.getHelp',\r\n                                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                            },\r\n                                            {\r\n                                                target: '.nomatch',\r\n                                            }\r\n                                        ],\r\n                                        TIMEOUT: { target: '.makeSure' }\r\n                                    },\r\n                                    states: {\r\n                                        makeSure: {\r\n                                            entry: send((context) => ({\r\n                                                type: 'SPEAK',\r\n                                                value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                            })),\r\n                                            on: {\r\n                                                ENDSPEECH: 'ask'\r\n                                            }\r\n                                        },\r\n                                        ask: {\r\n                                            entry: send('LISTEN'),\r\n                                        },\r\n                                        nomatch: {\r\n                                            entry: say(\"Sorry, I did not get that.\"),\r\n                                            on: { ENDSPEECH: 'makeSure' }\r\n                                        },\r\n                                    },\r\n                                },\r\n                                makeSureNegation: {\r\n                                    initial: 'makeSure',\r\n                                    on: {\r\n                                        RECOGNISED: [\r\n                                            {\r\n                                                target: '#root.dm.appointmentApp.welcome',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.appointmentApp.purpose',\r\n                                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                                actions: [assign({ counter: (context) => 0 })]\r\n                                            },\r\n                                            {\r\n                                                target: 'makeSureConfirmation',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                                actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                            },\r\n                                            {\r\n                                                target: 'makeSureNegation',\r\n                                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                                actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.getHelp',\r\n                                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                            },\r\n                                            {\r\n                                                target: '.nomatch',\r\n                                            }\r\n                                        ],\r\n                                        TIMEOUT: { target: '.makeSure' }\r\n                                    },\r\n                                    states: {\r\n                                        makeSure: {\r\n                                            entry: send((context) => ({\r\n                                                type: 'SPEAK',\r\n                                                value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                            })),\r\n                                            on: {\r\n                                                ENDSPEECH: 'ask'\r\n                                            }\r\n                                        },\r\n                                        ask: {\r\n                                            entry: send('LISTEN'),\r\n                                        },\r\n                                        nomatch: {\r\n                                            entry: say(\"Sorry, I did not get that.\"),\r\n                                            on: { ENDSPEECH: 'makeSure' }\r\n                                        },\r\n\r\n                                    },\r\n                                }\r\n                            },\r\n                        },\r\n                        makeSureCelebrity: {\r\n                            initial: 'choose',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.celebrity',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.welcome',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: '.makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                    },\r\n                                    {\r\n                                        target: '.makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                choose: {\r\n                                    always: [\r\n                                        { target: '#root.dm.appointmentApp.celebrity', cond: (context) => context.recResult[0].confidence > 0.6, },\r\n                                        { target: 'makeSure', cond: (context) => context.recResult[0].confidence <= 0.6, },\r\n                                    ]\r\n                                },\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.uncertain}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n                                makeSureConfirmation: {\r\n                                    initial: 'makeSure',\r\n                                    on: {\r\n                                        RECOGNISED: [\r\n                                            {\r\n                                                target: '#root.dm.appointmentApp.celebrity',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                                actions: [assign({ counter: (context) => 0 })]\r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.appointmentApp.welcome',\r\n                                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                            },\r\n                                            {\r\n                                                target: 'makeSureConfirmation',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                                actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                            },\r\n                                            {\r\n                                                target: 'makeSureNegation',\r\n                                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                                actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.getHelp',\r\n                                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                            },\r\n                                            {\r\n                                                target: '.nomatch',\r\n                                            }\r\n                                        ],\r\n                                        TIMEOUT: { target: '.makeSure' }\r\n                                    },\r\n                                    states: {\r\n                                        makeSure: {\r\n                                            entry: send((context) => ({\r\n                                                type: 'SPEAK',\r\n                                                value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                            })),\r\n                                            on: {\r\n                                                ENDSPEECH: 'ask'\r\n                                            }\r\n                                        },\r\n                                        ask: {\r\n                                            entry: send('LISTEN'),\r\n                                        },\r\n                                        nomatch: {\r\n                                            entry: say(\"Sorry, I did not get that.\"),\r\n                                            on: { ENDSPEECH: 'makeSure' }\r\n                                        },\r\n                                    },\r\n                                },\r\n                                makeSureNegation: {\r\n                                    initial: 'makeSure',\r\n                                    on: {\r\n                                        RECOGNISED: [\r\n                                            {\r\n                                                target: '#root.dm.appointmentApp.welcome',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.appointmentApp.celebrity',\r\n                                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                                actions: [assign({ counter: (context) => 0 })]\r\n                                            },\r\n                                            {\r\n                                                target: 'makeSureConfirmation',\r\n                                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                                actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                            },\r\n                                            {\r\n                                                target: 'makeSureNegation',\r\n                                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                                actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                            },\r\n                                            {\r\n                                                target: '#root.dm.getHelp',\r\n                                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                            },\r\n                                            {\r\n                                                target: '.nomatch',\r\n                                            }\r\n                                        ],\r\n                                        TIMEOUT: { target: '.makeSure' }\r\n                                    },\r\n                                    states: {\r\n                                        makeSure: {\r\n                                            entry: send((context) => ({\r\n                                                type: 'SPEAK',\r\n                                                value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                            })),\r\n                                            on: {\r\n                                                ENDSPEECH: 'ask'\r\n                                            }\r\n                                        },\r\n                                        ask: {\r\n                                            entry: send('LISTEN'),\r\n                                        },\r\n                                        nomatch: {\r\n                                            entry: say(\"Sorry, I did not get that.\"),\r\n                                            on: { ENDSPEECH: 'makeSure' }\r\n                                        },\r\n\r\n                                    },\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                },\r\n                celebrity: {\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: 'confirmCeleb',\r\n                                cond: (context) => context.recResult[0].confidence > 0.6,\r\n                                actions: [assign({ celebrity: (context) => context.recResult[0].utterance }), assign({ counter: (context) => 0 })]\r\n                            },\r\n                            {\r\n                                target: '.makeSureCeleb',\r\n                                cond: (context) => context.recResult[0].confidence <= 0.6,\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            }\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n                    states: {\r\n                        choose: {\r\n                            always: [\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: '#root.dm.init', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: say(\"Who do you want to know about?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"What celebrity would you like to hear about?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Please tell me the name of the person you want me to tell you about.\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        makeSureCeleb: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.confirmCeleb',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ celebrity: (context) => context.uncertain }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.celebrity',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ celebrity: (context) => context.uncertain }),]\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.uncertain}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                }\r\n                            },\r\n                        },\r\n                        makeSureConfirmation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.confirmCeleb',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ username: (context) => context.uncertain }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.celebrity',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n                            },\r\n                        },\r\n                        makeSureNegation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.celebrity',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.confirmCeleb',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ username: (context) => context.uncertain }),]\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n\r\n                confirmCeleb: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, looking for information about ${context.celebrity}`\r\n                    })),\r\n                    on: { ENDSPEECH: 'getCeleb' }\r\n                },\r\n\r\n                getCeleb: {\r\n                    invoke: {\r\n                        id: 'getInfo',\r\n                        src: (context, event) => kbRequest(context.celebrity),\r\n                        onDone: {\r\n                            target: 'celebMeeting',\r\n                            actions: [\r\n                                assign({ info: (context, event) => event.data.AbstractText }),\r\n                                (context, event) => console.log(context, event)\r\n                            ]\r\n                        },\r\n                        onError: {\r\n                            target: 'celebrity'\r\n                        }\r\n                    }\r\n                },\r\n\r\n                celebMeeting: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'date',\r\n                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                actions: [assign({ title: (context) => `meeting with ${context.celebrity}` }), assign({ counter: (context) => 0 }),]\r\n                            },\r\n                            {\r\n                                target: 'welcome',\r\n                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                actions: assign({ counter: (context) => 0 }),\r\n                            },\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '.nomatch',\r\n                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                            }\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `${context.info}`\r\n                            })),\r\n                            on: { ENDSPEECH: 'choose' }\r\n                        },\r\n                        choose: {\r\n                            always: [\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: '#root.dm.init', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Do you want to meet ${context.celebrity}?`\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt2: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Would you like to meet ${context.celebrity}?`\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt3: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Should I schedule you a meeting with ${context.celebrity}?`\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't get it.\"),\r\n                            on: { ENDSPEECH: 'choose' }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                purpose: {\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'info',\r\n                                cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                actions: [assign({ title: (context) => grammar[context.recResult[0].utterance].title! }), assign({ counter: (context) => 0 }),]\r\n                            },\r\n                            {\r\n                                target: '.makeSurePurpose',\r\n                                cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            },\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '.nomatch',\r\n                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                            }\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n                    states: {\r\n                        choose: {\r\n                            always: [\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: '#root.dm.init', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: say(\"What is it about?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"What is your meeting about?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Please tell me the purpose of your meeting.\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\r\n                            on: { ENDSPEECH: 'choose' }\r\n                        },\r\n                        makeSurePurpose: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.info',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ title: (context) => grammar[context.uncertain].title! }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.purpose',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.uncertain}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        },\r\n                        makeSureConfirmation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.info',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ title: (context) => grammar[context.uncertain].title! }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.purpose',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n                            },\r\n                        },\r\n                        makeSureNegation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.purpose',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.info',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ title: (context) => grammar[context.uncertain].title! }),]\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n\r\n                info: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.title}`\r\n                    })),\r\n                    on: { ENDSPEECH: 'date' }\r\n                },\r\n\r\n                date: {\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'info2',\r\n                                cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                actions: [assign({ day: (context) => grammar[context.recResult[0].utterance].day! }), assign({ counter: (context) => 0 })]\r\n                            },\r\n                            {\r\n                                target: '.makeSureDay',\r\n                                cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            },\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '.nomatch',\r\n                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                            }\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n                    states: {\r\n                        choose: {\r\n                            always: [\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: '#root.dm.init', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: say(\"On which day is this meeting going to be?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"What is the day of your meeting?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Please tell me what day you plan this meeting for.\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I did not understand what you said.\"),\r\n                            on: { ENDSPEECH: 'choose' }\r\n                        },\r\n                        makeSureDay: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.info2',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ day: (context) => grammar[context.uncertain].day! }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.date',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.uncertain}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        },\r\n                        makeSureConfirmation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.info2',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ day: (context) => grammar[context.uncertain].day! }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.date',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n                            },\r\n                        },\r\n                        makeSureNegation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.date',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.info2',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ day: (context) => grammar[context.uncertain].day! }),]\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n\r\n                time: {\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'info3',\r\n                                cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                actions: [assign({ time: (context) => grammar[context.recResult[0].utterance].time! }), assign({ counter: (context) => 0 })]\r\n                            },\r\n                            {\r\n                                target: '.makeSureTime',\r\n                                cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            },\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '.nomatch',\r\n                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                            }\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n                    states: {\r\n                        choose: {\r\n                            always: [\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: '#root.dm.init', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: say(\"What time is your meeting?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"At what time will your meeting take place?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Please tell me the hour to schedule your meeting for.\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't hear what time it was supposed to be.\"),\r\n                            on: { ENDSPEECH: 'choose' }\r\n                        },\r\n                        makeSureTime: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.info3',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ time: (context) => grammar[context.uncertain].time! }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.time',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.uncertain}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        },\r\n                        makeSureConfirmation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.info3',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ time: (context) => grammar[context.uncertain].time! }),]\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.time',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n                            },\r\n                        },\r\n                        makeSureNegation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.time',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => context.counter + 1 }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.info3',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: [assign({ counter: (context) => 0 }), assign({ time: (context) => grammar[context.uncertain].time! }),]\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n\r\n                info2: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.day}`\r\n                    })),\r\n                    on: { ENDSPEECH: 'allDay' }\r\n                },\r\n\r\n                info3: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.time}`\r\n                    })),\r\n                    on: { ENDSPEECH: 'confirmTime' }\r\n                },\r\n\r\n                allDay: {\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'confirmAllDay',\r\n                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                actions: assign({ counter: (context) => 0 })\r\n                            },\r\n                            {\r\n                                target: 'time',\r\n                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                actions: assign({ counter: (context) => 0 })\r\n                            },\r\n                            {\r\n                                target: '.makeSureConfirmation',\r\n                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            },\r\n                            {\r\n                                target: '.makeSureNegation',\r\n                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            },\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '.nomatch',\r\n                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                            }\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n\r\n                    states: {\r\n                        choose: {\r\n                            always: [\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: '#root.dm.init', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: say(\"Will it take the whole day?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"Will your meeting take the whole day?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Are you planning to spend your whole day on this meeting?\"),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't get it.\"),\r\n                            on: { ENDSPEECH: 'choose' }\r\n                        },\r\n                        makeSureConfirmation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.confirmAllDay',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.time',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n                            },\r\n                        },\r\n                        makeSureNegation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.time',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.confirmAllDay',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n\r\n                confirmAllDay: {\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'success',\r\n                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                actions: assign({ counter: (context) => 0 })\r\n                            },\r\n                            {\r\n                                target: 'welcome',\r\n                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                actions: assign({ counter: (context) => 0 })\r\n                            },\r\n                            {\r\n                                target: '.makeSureConfirmation',\r\n                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            },\r\n                            {\r\n                                target: '.makeSureNegation',\r\n                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            },\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '.nomatch',\r\n                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                            }\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n\r\n                    states: {\r\n                        choose: {\r\n                            always: [\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: '#root.dm.init', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `${context.username}, do you want me to create a meeting titled ${context.title} for ${context.day} for the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt2: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Dear ${context.username}, should I create a meeting titled ${context.title} for ${context.day} for the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt3: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `${context.username}, shall I schedule you a meeting titled ${context.title} for ${context.day} for the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't get it.\"),\r\n                            on: { ENDSPEECH: 'choose' }\r\n                        },\r\n                        makeSureConfirmation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.success',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.welcome',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n                            },\r\n                        },\r\n                        makeSureNegation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.welcome',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.success',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n\r\n                confirmTime: {\r\n                    initial: 'choose',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'success',\r\n                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                actions: assign({ counter: (context) => 0 })\r\n                            },\r\n                            {\r\n                                target: 'welcome',\r\n                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                actions: assign({ counter: (context) => 0 })\r\n                            },\r\n                            {\r\n                                target: '.makeSureConfirmation',\r\n                                cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            },\r\n                            {\r\n                                target: '.makeSureNegation',\r\n                                cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                actions: [assign({ uncertain: (context) => context.recResult[0].utterance })]\r\n                            },\r\n                            {\r\n                                target: '#root.dm.getHelp',\r\n                                cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '.nomatch',\r\n                                actions: assign({ counter: (context) => context.counter + 1 }),\r\n                            }\r\n                        ],\r\n                        TIMEOUT: { actions: assign({ counter: (context) => context.counter + 1 }), target: '.choose' }\r\n                    },\r\n\r\n                    states: {\r\n                        choose: {\r\n                            always: [\r\n                                { target: 'prompt1', cond: (context) => context.counter === 0 },\r\n                                { target: 'prompt2', cond: (context) => context.counter === 1 },\r\n                                { target: 'prompt3', cond: (context) => context.counter === 2 },\r\n                                { target: '#root.dm.init', cond: (context) => context.counter === 3 },\r\n                            ]\r\n                        },\r\n                        prompt1: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `${context.username}, do you want me to create a meeting titled ${context.title} for ${context.day} at ${context.time}`\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt2: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Dear ${context.username}, should I create a meeting titled ${context.title} for ${context.day} at ${context.time}`\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt3: {\r\n                            entry: send((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `${context.username}, shall I schedule you a meeting titled ${context.title} for ${context.day} at ${context.time}`\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN'),\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't get it.\"),\r\n                            on: { ENDSPEECH: 'choose' }\r\n                        },\r\n                        makeSureConfirmation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.success',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.welcome',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n                            },\r\n                        },\r\n                        makeSureNegation: {\r\n                            initial: 'makeSure',\r\n                            on: {\r\n                                RECOGNISED: [\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.welcome',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.appointmentApp.success',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > 0.6,\r\n                                        actions: assign({ counter: (context) => 0 })\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureConfirmation',\r\n                                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: 'makeSureNegation',\r\n                                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence <= 0.6,\r\n                                        actions: assign({ uncertainAnswer: (context) => context.recResult[0].utterance }),\r\n                                    },\r\n                                    {\r\n                                        target: '#root.dm.getHelp',\r\n                                        cond: (context) => \"help\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                                    },\r\n                                    {\r\n                                        target: '.nomatch',\r\n                                    }\r\n                                ],\r\n                                TIMEOUT: { target: '.makeSure' }\r\n                            },\r\n                            states: {\r\n                                makeSure: {\r\n                                    entry: send((context) => ({\r\n                                        type: 'SPEAK',\r\n                                        value: `Did you mean ${context.recResult[0].utterance}?`\r\n                                    })),\r\n                                    on: {\r\n                                        ENDSPEECH: 'ask'\r\n                                    }\r\n                                },\r\n                                ask: {\r\n                                    entry: send('LISTEN'),\r\n                                },\r\n                                nomatch: {\r\n                                    entry: say(\"Sorry, I did not get that.\"),\r\n                                    on: { ENDSPEECH: 'makeSure' }\r\n                                },\r\n\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n\r\n                success: {\r\n                    entry: say(`Your meeting has been created!`),\r\n                    on: { ENDSPEECH: '#root.dm.init' }\r\n                },\r\n            }\r\n        },\r\n    }\r\n})\r\n\r\n\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, actions, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointmentPlus\";\r\n\r\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\r\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\r\n\r\n\r\nconst { send, cancel } = actions\r\n\r\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\r\nconst REGION = 'northeurope';\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\n\r\nconst defaultPassivity = 20\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n\r\n        asrtts: {\r\n            initial: 'init',\r\n            states: {\r\n                init: {\r\n                    on: {\r\n                        CLICK: {\r\n                            target: 'getToken',\r\n                            actions: [\r\n                                assign({\r\n                                    audioCtx: (_ctx) =>\r\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\r\n                                }),\r\n                                (context) =>\r\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\r\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                getToken: {\r\n                    invoke: {\r\n                        id: \"getAuthorizationToken\",\r\n                        src: (_ctx, _evt) => getAuthorizationToken(),\r\n                        onDone: {\r\n                            actions: [\r\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\r\n                                'ponyfillASR'],\r\n                            target: 'ponyfillTTS'\r\n                        },\r\n                        onError: {\r\n                            target: 'fail'\r\n                        }\r\n                    }\r\n                },\r\n                ponyfillTTS: {\r\n                    invoke: {\r\n                        id: 'ponyTTS',\r\n                        src: (context, _event) => (callback, _onReceive) => {\r\n                            const ponyfill = createSpeechSynthesisPonyfill({\r\n                                audioContext: context.audioCtx,\r\n                                credentials: {\r\n                                    region: REGION,\r\n                                    authorizationToken: context.azureAuthorizationToken,\r\n                                }\r\n                            });\r\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\r\n                            context.tts = speechSynthesis\r\n                            context.ttsUtterance = SpeechSynthesisUtterance\r\n                            context.tts.addEventListener('voiceschanged', () => {\r\n                                context.tts.cancel()\r\n                                const voices = context.tts.getVoices();\r\n                                let voiceRe = RegExp(\"en-US\", 'u')\r\n                                if (process.env.REACT_APP_TTS_VOICE) {\r\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\r\n                                }\r\n                                const voice = voices.find(voice => /Brandon/u.test(voice.name))! //voices.find((v: any) => voiceRe.test(v.name))! - this was based on the solution linked by Nadina Suditu\r\n                                if (voice) {\r\n                                    context.voice = voice\r\n                                    callback('TTS_READY')\r\n                                } else {\r\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\r\n                                    callback('TTS_ERROR')\r\n                                }\r\n                            })\r\n                        }\r\n                    },\r\n                    on: {\r\n                        TTS_READY: 'idle',\r\n                        TTS_ERROR: 'fail'\r\n                    }\r\n                },\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    },\r\n                },\r\n                recognising: {\r\n                    initial: 'noinput',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => {\r\n                                    return {\r\n                                        recResult: event.value\r\n                                    }\r\n                                })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: '.pause',\r\n                    },\r\n                    states: {\r\n                        noinput: {\r\n                            entry: [\r\n                                'recStart',\r\n                                send(\r\n                                    { type: 'TIMEOUT' },\r\n                                    { delay: (context) => (500 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\r\n                                )],\r\n                            on: {\r\n                                TIMEOUT: '#root.asrtts.idle',\r\n                                STARTSPEECH: 'inprogress'\r\n                            },\r\n                            exit: cancel('timeout')\r\n                        },\r\n                        inprogress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                        pause: {\r\n                            entry: 'recStop',\r\n                            on: { CLICK: 'noinput' }\r\n                        }\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\r\n                    },\r\n                    exit: 'ttsStop',\r\n                },\r\n                fail: {}\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n    alternative: any;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"name\") || {}).value;\r\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"image\") || {}).value;\r\n    var circleClass = \"circle\"\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\r\n            break;\r\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\r\n            promptText = \"Click to continue\"\r\n            break;\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            circleClass = \"circle-recognising\"\r\n            promptText = promptText || 'Listening...'\r\n            break;\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            circleClass = \"circle-speaking\"\r\n            promptText = promptText || 'Speaking...'\r\n            break;\r\n        case props.state.matches({ dm: 'idle' }):\r\n            promptText = \"Click to play!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        case props.state.matches({ dm: 'init' }):\r\n            promptText = \"Click to play!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        default:\r\n            promptText = promptText || '\\u00A0'\r\n    }\r\n    return (\r\n        <div className=\"control\">\r\n            <figure className=\"prompt\">\r\n                {promptImage &&\r\n                    <img src={promptImage}\r\n                        alt={promptText} />}\r\n            </figure>\r\n            <div className=\"status\">\r\n                <button type=\"button\" className={circleClass}\r\n                    style={{}} {...props}>\r\n                </button>\r\n                <div className=\"status-text\">\r\n                    {promptText}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nconst FigureButton = (props: Props): JSX.Element => {\r\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\r\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\r\n    return (\r\n        <figure className=\"flex\" {...props}>\r\n            {imageSrc &&\r\n                <img src={imageSrc} alt={caption} />}\r\n            <figcaption>{caption}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [current, send] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n\r\n            changeColour: asEffect((context) => {\r\n                document.body.style.background = context.recResult[0].utterance;\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n\r\n            recStart: asEffect((context) => {\r\n                context.asr.start()\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n            recStop: asEffect((context) => {\r\n                context.asr.abort()\r\n                /* console.log('Recognition stopped.'); */\r\n            }),\r\n            ttsStart: asEffect((context) => {\r\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\r\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\r\n                content = content + `${context.ttsAgenda}</voice></speak>`\r\n                console.debug(content)\r\n                const utterance = new context.ttsUtterance(content);\r\n                console.log(\"S>\", context.ttsAgenda)\r\n                utterance.voice = context.voice\r\n                utterance.onend = () => send('ENDSPEECH')\r\n                context.tts.speak(utterance)\r\n            }),\r\n            ttsStop: asEffect((context) => {\r\n                /* console.log('TTS STOP...'); */\r\n                context.tts.cancel()\r\n            }),\r\n            ponyfillASR: asEffect((context, _event) => {\r\n                const\r\n                    { SpeechRecognition }\r\n                        = createSpeechRecognitionPonyfill({\r\n                            audioContext: context.audioCtx,\r\n                            credentials: {\r\n                                region: REGION,\r\n                                authorizationToken: context.azureAuthorizationToken,\r\n                            }\r\n                        });\r\n                context.asr = new SpeechRecognition()\r\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\r\n                context.asr.continuous = true\r\n                context.asr.interimResults = true\r\n                context.asr.onresult = function(event: any) {\r\n                    var result = event.results[0]\r\n                    if (result.isFinal) {\r\n                        send({\r\n                            type: \"ASRRESULT\", value:\r\n                                [{\r\n                                    \"utterance\": result[0].transcript,\r\n                                    \"confidence\": result[0].confidence\r\n                                }]\r\n                        })\r\n                    } else {\r\n                        send({ type: \"STARTSPEECH\" });\r\n                    }\r\n                }\r\n\r\n            })\r\n        }\r\n    });\r\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\r\n        .map(\r\n            (o: any, i: any) => (\r\n                <FigureButton state={current}\r\n                    alternative={o.visual_information}\r\n                    key={i}\r\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\r\n            )\r\n        )\r\n\r\n    switch (true) {\r\n        default:\r\n            return (\r\n                <div className=\"App\">\r\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\r\n                    <div className=\"select-wrapper\">\r\n                        <div className=\"select\">\r\n                            {figureButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n};\r\n\r\nconst getAuthorizationToken = () => (\r\n    fetch(new Request(TOKEN_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\r\n        },\r\n    })).then(data => data.text()))\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}