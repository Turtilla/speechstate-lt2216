{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","ans_grammar","confirmation","negation","dec_grammar","meeting","celebrity","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","askForName","RECOGNISED","target","actions","assign","username","context","recResult","utterance","TIMEOUT","prompt","entry","ENDSPEECH","ask","greet","welcome","cond","nomatch","confirmCeleb","getCeleb","invoke","id","src","event","fetch","Request","then","data","json","onDone","info","AbstractText","console","log","onError","celebMeeting","question","purpose","date","info2","info3","allDay","confirmAllDay","confirmTime","success","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","content","debug","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.f25b772f.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nconst kbRequest = (text: string) =>\r\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\r\n\r\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string } } = {\r\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\r\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\r\n    \"Cinema.\": { title: \"A movie at the cinema\" },\r\n    \"Walk.\": { title: \"A walk in the park\" },\r\n    \"Date.\": { title: \"A romantic date at a great restaurant\" },\r\n    \"Language course.\": { title: \"Swedish language course on zoom\" },\r\n    \"Programming.\": { title: \"Programming the assignment with classmates\" },\r\n    \"Video games.\": { title: \"Gaming with friends\" },\r\n    \"Phone call.\": { title: \"A call with the family\" },\r\n\r\n    \"On Monday.\": { day: \"Monday\" },\r\n    \"On Tuesday.\": { day: \"Tuesday\" },\r\n    \"On Wednesday.\": { day: \"Wednesday\" },\r\n    \"On Thursday.\": { day: \"Thursday\" },\r\n    \"On Friday.\": { day: \"Friday\" },\r\n    \"On Saturday.\": { day: \"Saturday\" },\r\n    \"On Sunday.\": { day: \"Sunday\" },\r\n    \"Monday.\": { day: \"Monday\" },\r\n    \"Tuesday.\": { day: \"Tuesday\" },\r\n    \"Wednesday.\": { day: \"Wednesday\" },\r\n    \"Thursday.\": { day: \"Thursday\" },\r\n    \"Friday.\": { day: \"Friday\" },\r\n    \"Saturday.\": { day: \"Saturday\" },\r\n    \"Sunday.\": { day: \"Sunday\" },\r\n    \"Monday\": { day: \"Monday\" },\r\n    \"Tuesday\": { day: \"Tuesday\" },\r\n    \"Wednesday\": { day: \"Wednesday\" },\r\n    \"Thursday\": { day: \"Thursday\" },\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"Saturday\": { day: \"Saturday\" },\r\n    \"Sunday\": { day: \"Sunday\" },\r\n    \"Today\": { day: \"today\" },\r\n    \"Tomorrow.\": { day: \"tomorrow\" },\r\n\r\n    \"Midday.\": { time: \"12:00\" }, // this section is rather long due to having 12 possible hours and many ways of saying them (or them being written down)\r\n    \"At noon\": { time: \"12:00\" },\r\n    \"10.\": { time: \"10:00\" },\r\n    \"11.\": { time: \"11:00\" },\r\n    \"12.\": { time: \"12:00\" },\r\n    \"1.\": { time: \"1:00\" },\r\n    \"2.\": { time: \"2:00\" },\r\n    \"3.\": { time: \"3:00\" },\r\n    \"4.\": { time: \"4:00\" },\r\n    \"5.\": { time: \"5:00\" },\r\n    \"6.\": { time: \"6:00\" },\r\n    \"7.\": { time: \"7:00\" },\r\n    \"8.\": { time: \"8:00\" },\r\n    \"9.\": { time: \"9:00\" },\r\n    \"10\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"1\": { time: \"1:00\" },\r\n    \"2\": { time: \"2:00\" },\r\n    \"3\": { time: \"3:00\" },\r\n    \"4\": { time: \"4:00\" },\r\n    \"5\": { time: \"5:00\" },\r\n    \"6\": { time: \"6:00\" },\r\n    \"7\": { time: \"7:00\" },\r\n    \"8\": { time: \"8:00\" },\r\n    \"9\": { time: \"9:00\" },\r\n    \"At 10:00\": { time: \"10:00\" },\r\n    \"At 11:00\": { time: \"11:00\" },\r\n    \"At 12:00\": { time: \"12:00\" },\r\n    \"At 1:00\": { time: \"1:00\" },\r\n    \"At 2:00\": { time: \"2:00\" },\r\n    \"At 3:00\": { time: \"3:00\" },\r\n    \"At 4:00\": { time: \"4:00\" },\r\n    \"At 5:00\": { time: \"5:00\" },\r\n    \"At 6:00\": { time: \"6:00\" },\r\n    \"At 7:00\": { time: \"7:00\" },\r\n    \"At 8:00\": { time: \"8:00\" },\r\n    \"At 9:00\": { time: \"9:00\" },\r\n    \"At ten\": { time: \"10:00\" },\r\n    \"At eleven\": { time: \"11:00\" },\r\n    \"At twelve\": { time: \"12:00\" },\r\n    \"At one\": { time: \"1:00\" },\r\n    \"At two\": { time: \"2:00\" },\r\n    \"At three\": { time: \"3:00\" },\r\n    \"At four\": { time: \"4:00\" },\r\n    \"At five\": { time: \"5:00\" },\r\n    \"At six\": { time: \"6:00\" },\r\n    \"At seven\": { time: \"7:00\" },\r\n    \"At eight\": { time: \"8:00\" },\r\n    \"At nine\": { time: \"9:00\" },\r\n    \"At 10:00 o'clock.\": { time: \"10:00\" },\r\n    \"At 11:00 o'clock.\": { time: \"11:00\" },\r\n    \"At 12:00 o'clock.\": { time: \"12:00\" },\r\n    \"At 1:00 o'clock.\": { time: \"1:00\" },\r\n    \"At 2:00 o'clock.\": { time: \"2:00\" },\r\n    \"At 3:00 o'clock.\": { time: \"3:00\" },\r\n    \"At 4:00 o'clock.\": { time: \"4:00\" },\r\n    \"At 5:00 o'clock.\": { time: \"5:00\" },\r\n    \"At 6:00 o'clock.\": { time: \"6:00\" },\r\n    \"At 7:00 o'clock.\": { time: \"7:00\" },\r\n    \"At 8:00 o'clock.\": { time: \"8:00\" },\r\n    \"At 9:00 o'clock.\": { time: \"9:00\" },\r\n    \"10:00 o'clock.\": { time: \"10:00\" },\r\n    \"11:00 o'clock.\": { time: \"11:00\" },\r\n    \"12:00 o'clock.\": { time: \"12:00\" },\r\n    \"1:00 o'clock.\": { time: \"1:00\" },\r\n    \"2:00 o'clock.\": { time: \"2:00\" },\r\n    \"3:00 o'clock.\": { time: \"3:00\" },\r\n    \"4:00 o'clock.\": { time: \"4:00\" },\r\n    \"5:00 o'clock.\": { time: \"5:00\" },\r\n    \"6:00 o'clock.\": { time: \"6:00\" },\r\n    \"7:00 o'clock.\": { time: \"7:00\" },\r\n    \"8:00 o'clock.\": { time: \"8:00\" },\r\n    \"9:00 o'clock.\": { time: \"9:00\" },\r\n    \"10:00 o'clock\": { time: \"10:00\" },\r\n    \"11:00 o'clock\": { time: \"11:00\" },\r\n    \"12:00 o'clock\": { time: \"12:00\" },\r\n    \"1:00 o'clock\": { time: \"1:00\" },\r\n    \"2:00 o'clock\": { time: \"2:00\" },\r\n    \"3:00 o'clock\": { time: \"3:00\" },\r\n    \"4:00 o'clock\": { time: \"4:00\" },\r\n    \"5:00 o'clock\": { time: \"5:00\" },\r\n    \"6:00 o'clock\": { time: \"6:00\" },\r\n    \"7:00 o'clock\": { time: \"7:00\" },\r\n    \"8:00 o'clock\": { time: \"8:00\" },\r\n    \"9:00 o'clock\": { time: \"9:00\" },\r\n}\r\n\r\nconst ans_grammar: { [index: string]: { confirmation?: string, negation?: string } } = {\r\n\r\n    \"Yes.\": { confirmation: \"Yes\" },\r\n    \"Yeah.\": { confirmation: \"Yes\" },\r\n    \"Of course.\": { confirmation: \"Yes\" },\r\n    \"Exactly.\": { confirmation: \"Yes\" },\r\n    \"Yeah, exactly.\": { confirmation: \"Yes\" },\r\n    \"No.\": { negation: \"No\" },\r\n    \"Nope.\": { negation: \"No\" },\r\n    \"No way.\": { negation: \"No\" },\r\n    \"Not what I said.\": { negation: \"No\" }\r\n}\r\n\r\nconst dec_grammar: { [index: string]: { meeting?: string, celebrity?: string } } = {\r\n\r\n    \"I want to create a meeting.\": { meeting: \"Yes\" },\r\n    \"Create a meeting.\": { meeting: \"Yes\" },\r\n    \"A meeting.\": { meeting: \"Yes\" },\r\n    \"I want a meeting.\": { meeting: \"Yes\" },\r\n    \"Meeting.\": { meeting: \"Yes\" },\r\n    \"I want to ask about somebody.\": { celebrity: \"Yes\" },\r\n    \"I want to ask about someone.\": { celebrity: \"Yes\" },\r\n    \"Ask about somebody.\": { celebrity: \"Yes\" },\r\n    \"Ask about someone.\": { celebrity: \"Yes\" },\r\n    \"I want to ask.\": { celebrity: \"Yes\" },\r\n    \"Somebody.\": { celebrity: \"Yes\" },\r\n    \"Someone.\": { celebrity: \"Yes\" },\r\n    \"Ask.\": { celebrity: \"Yes\" },\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'idle',\r\n    states: {\r\n        idle: {\r\n            on: {\r\n                CLICK: 'init'\r\n            }\r\n        },\r\n        init: {\r\n            on: {\r\n                TTS_READY: 'askForName',\r\n                CLICK: 'askForName'\r\n            }\r\n        },\r\n\r\n        askForName: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'greet',\r\n                        actions: assign({ username: (context) => context.recResult[0].utterance })\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Hi, what's your name?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                }\r\n            }\r\n        },\r\n\r\n        greet: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `Welcome, ${context.username}.`\r\n            })),\r\n            on: { ENDSPEECH: 'welcome' }\r\n        },\r\n\r\n        welcome: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'purpose',\r\n                        cond: (context) => \"meeting\" in (dec_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: 'celebrity',\r\n                        cond: (context) => \"celebrity\" in (dec_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Do you want to create a meeting or ask about somebody?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I didn't understand that. Can you repeat?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n\r\n        celebrity: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'confirmCeleb',\r\n                        actions: assign({ celebrity: (context) => context.recResult[0].utterance })\r\n                    },\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who do you want to know about?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                }\r\n            }\r\n        },\r\n\r\n        confirmCeleb: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, looking for information about ${context.celebrity}`\r\n            })),\r\n            on: { ENDSPEECH: 'getCeleb' }\r\n        },\r\n\r\n        getCeleb: {\r\n            invoke: {\r\n                id: 'getInfo',\r\n                src: (context, event) => kbRequest(context.celebrity),\r\n                onDone: {\r\n                    target: 'celebMeeting',\r\n                    actions: [\r\n                        assign({ info: (context, event) => event.data.AbstractText }),\r\n                        (context, event) => console.log(context, event)\r\n                        ]\r\n                },\r\n                onError: {\r\n                    target: 'celebrity'\r\n                }\r\n            }\r\n        },\r\n\r\n        celebMeeting: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'date',\r\n                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ title: (context) => `meeting with ${context.celebrity}` })\r\n                    },\r\n                    {\r\n                        target: 'welcome',\r\n                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.question'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `${context.info}`\r\n                    })),\r\n                    on: { ENDSPEECH: 'question' }\r\n                },\r\n                question: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `Do you want to meet ${context.celebrity}?`\r\n                    })),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I didn't get it. Can you please repeat.\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n\r\n        purpose: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'info',\r\n                        cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What is it about?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n\r\n        info: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.title}`\r\n            })),\r\n            on: { ENDSPEECH: 'date' }\r\n        },\r\n\r\n        date: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'info2',\r\n                        cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ day: (context) => grammar[context.recResult[0].utterance].day! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"On which day is this meeting going to be?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what day it is. Could you repeat?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n\r\n        time: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'info3',\r\n                        cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ time: (context) => grammar[context.recResult[0].utterance].time! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I didn't hear what time it was supposed to be. Could you repeat?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n\r\n        info2: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.day}`\r\n            })),\r\n            on: { ENDSPEECH: 'allDay' }\r\n        },\r\n\r\n        info3: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.time}`\r\n            })),\r\n            on: { ENDSPEECH: 'confirmTime' }\r\n        },\r\n\r\n        allDay: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'confirmAllDay',\r\n                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: 'time',\r\n                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I didn't get it. Could you repeat?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n\r\n        confirmAllDay: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'success',\r\n                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: 'welcome',\r\n                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `${context.username}, do you want me to create a meeting titled ${context.title} for ${context.day} for the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I didn't get it. Could you repeat?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n\r\n        confirmTime: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'success',\r\n                        cond: (context) => \"confirmation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: 'welcome',\r\n                        cond: (context) => \"negation\" in (ans_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `${context.username}, do you want me to create a meeting titled ${context.title} for ${context.day} at ${context.time}?`\r\n                    })),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I didn't get it. Could you repeat?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n\r\n        success: {\r\n            entry: say(`Your meeting has been created!`),\r\n            on: { ENDSPEECH: 'init' }  \r\n        }\r\n    }\r\n})\r\n\r\n\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, actions, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\r\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\r\n\r\n\r\nconst { send, cancel } = actions\r\n\r\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\r\nconst REGION = 'northeurope';\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\n\r\nconst defaultPassivity = 10\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n\r\n        asrtts: {\r\n            initial: 'init',\r\n            states: {\r\n                init: {\r\n                    on: {\r\n                        CLICK: {\r\n                            target: 'getToken',\r\n                            actions: [\r\n                                assign({\r\n                                    audioCtx: (_ctx) =>\r\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\r\n                                }),\r\n                                (context) =>\r\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\r\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                getToken: {\r\n                    invoke: {\r\n                        id: \"getAuthorizationToken\",\r\n                        src: (_ctx, _evt) => getAuthorizationToken(),\r\n                        onDone: {\r\n                            actions: [\r\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\r\n                                'ponyfillASR'],\r\n                            target: 'ponyfillTTS'\r\n                        },\r\n                        onError: {\r\n                            target: 'fail'\r\n                        }\r\n                    }\r\n                },\r\n                ponyfillTTS: {\r\n                    invoke: {\r\n                        id: 'ponyTTS',\r\n                        src: (context, _event) => (callback, _onReceive) => {\r\n                            const ponyfill = createSpeechSynthesisPonyfill({\r\n                                audioContext: context.audioCtx,\r\n                                credentials: {\r\n                                    region: REGION,\r\n                                    authorizationToken: context.azureAuthorizationToken,\r\n                                }\r\n                            });\r\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\r\n                            context.tts = speechSynthesis\r\n                            context.ttsUtterance = SpeechSynthesisUtterance\r\n                            context.tts.addEventListener('voiceschanged', () => {\r\n                                context.tts.cancel()\r\n                                const voices = context.tts.getVoices();\r\n                                let voiceRe = RegExp(\"en-US\", 'u')\r\n                                if (process.env.REACT_APP_TTS_VOICE) {\r\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\r\n                                }\r\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\r\n                                if (voice) {\r\n                                    context.voice = voice\r\n                                    callback('TTS_READY')\r\n                                } else {\r\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\r\n                                    callback('TTS_ERROR')\r\n                                }\r\n                            })\r\n                        }\r\n                    },\r\n                    on: {\r\n                        TTS_READY: 'idle',\r\n                        TTS_ERROR: 'fail'\r\n                    }\r\n                },\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    },\r\n                },\r\n                recognising: {\r\n                    initial: 'noinput',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => {\r\n                                    return {\r\n                                        recResult: event.value\r\n                                    }\r\n                                })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: '.pause'\r\n                    },\r\n                    states: {\r\n                        noinput: {\r\n                            entry: [\r\n                                'recStart',\r\n                                send(\r\n                                    { type: 'TIMEOUT' },\r\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\r\n                                )],\r\n                            on: {\r\n                                TIMEOUT: '#root.asrtts.idle',\r\n                                STARTSPEECH: 'inprogress'\r\n                            },\r\n                            exit: cancel('timeout')\r\n                        },\r\n                        inprogress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                        pause: {\r\n                            entry: 'recStop',\r\n                            on: { CLICK: 'noinput' }\r\n                        }\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\r\n                    },\r\n                    exit: 'ttsStop',\r\n                },\r\n                fail: {}\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n    alternative: any;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"name\") || {}).value;\r\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"image\") || {}).value;\r\n    var circleClass = \"circle\"\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\r\n            break;\r\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\r\n            promptText = \"Click to continue\"\r\n            break;\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            circleClass = \"circle-recognising\"\r\n            promptText = promptText || 'Listening...'\r\n            break;\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            circleClass = \"circle-speaking\"\r\n            promptText = promptText || 'Speaking...'\r\n            break;\r\n        case props.state.matches({ dm: 'idle' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        case props.state.matches({ dm: 'init' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        default:\r\n            promptText = promptText || '\\u00A0'\r\n    }\r\n    return (\r\n        <div className=\"control\">\r\n            <figure className=\"prompt\">\r\n                {promptImage &&\r\n                    <img src={promptImage}\r\n                        alt={promptText} />}\r\n            </figure>\r\n            <div className=\"status\">\r\n                <button type=\"button\" className={circleClass}\r\n                    style={{}} {...props}>\r\n                </button>\r\n                <div className=\"status-text\">\r\n                    {promptText}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nconst FigureButton = (props: Props): JSX.Element => {\r\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\r\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\r\n    return (\r\n        <figure className=\"flex\" {...props}>\r\n            {imageSrc &&\r\n                <img src={imageSrc} alt={caption} />}\r\n            <figcaption>{caption}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [current, send] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n\r\n            changeColour: asEffect((context) => {\r\n                document.body.style.background = context.recResult[0].utterance;\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n\r\n            recStart: asEffect((context) => {\r\n                context.asr.start()\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n            recStop: asEffect((context) => {\r\n                context.asr.abort()\r\n                /* console.log('Recognition stopped.'); */\r\n            }),\r\n            ttsStart: asEffect((context) => {\r\n                let content = `<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xmlns:mstts=\"http://www.w3.org/2001/mstts\" xml:lang=\"en-US\"><voice name=\"${context.voice.name}\">`\r\n                content = content + (process.env.REACT_APP_TTS_LEXICON ? `<lexicon uri=\"${process.env.REACT_APP_TTS_LEXICON}\"/>` : \"\")\r\n                content = content + `${context.ttsAgenda}</voice></speak>`\r\n                console.debug(content)\r\n                const utterance = new context.ttsUtterance(content);\r\n                console.log(\"S>\", context.ttsAgenda)\r\n                utterance.voice = context.voice\r\n                utterance.onend = () => send('ENDSPEECH')\r\n                context.tts.speak(utterance)\r\n            }),\r\n            ttsStop: asEffect((context) => {\r\n                /* console.log('TTS STOP...'); */\r\n                context.tts.cancel()\r\n            }),\r\n            ponyfillASR: asEffect((context, _event) => {\r\n                const\r\n                    { SpeechRecognition }\r\n                        = createSpeechRecognitionPonyfill({\r\n                            audioContext: context.audioCtx,\r\n                            credentials: {\r\n                                region: REGION,\r\n                                authorizationToken: context.azureAuthorizationToken,\r\n                            }\r\n                        });\r\n                context.asr = new SpeechRecognition()\r\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\r\n                context.asr.continuous = true\r\n                context.asr.interimResults = true\r\n                context.asr.onresult = function(event: any) {\r\n                    var result = event.results[0]\r\n                    if (result.isFinal) {\r\n                        send({\r\n                            type: \"ASRRESULT\", value:\r\n                                [{\r\n                                    \"utterance\": result[0].transcript,\r\n                                    \"confidence\": result[0].confidence\r\n                                }]\r\n                        })\r\n                    } else {\r\n                        send({ type: \"STARTSPEECH\" });\r\n                    }\r\n                }\r\n\r\n            })\r\n        }\r\n    });\r\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\r\n        .map(\r\n            (o: any, i: any) => (\r\n                <FigureButton state={current}\r\n                    alternative={o.visual_information}\r\n                    key={i}\r\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\r\n            )\r\n        )\r\n\r\n    switch (true) {\r\n        default:\r\n            return (\r\n                <div className=\"App\">\r\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\r\n                    <div className=\"select-wrapper\">\r\n                        <div className=\"select\">\r\n                            {figureButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n};\r\n\r\nconst getAuthorizationToken = () => (\r\n    fetch(new Request(TOKEN_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\r\n        },\r\n    })).then(data => data.text()))\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}